{"version":3,"sources":["mansory.js","components/Modals.js","components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/loading/ProgressBar.js","components/GifGrid.js","components/GifExpertApp.js","index.js"],"names":["idTemporizador","ModalInfo","title","message","icon","Toast","Swal","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","fire","html","then","r","Modals","showCloseButton","showCancelButton","focusConfirm","confirmButtonText","AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","find","type","id","placeholder","value","onChange","target","GifGridItem","url","className","src","alt","getGifs","category","a","encodeURI","fetch","respuesta","json","data","map","img","images","downsized_medium","resizeMasonryItem","item","grid","document","getElementsByClassName","rowGap","parseInt","window","getComputedStyle","getPropertyValue","rowHeight","gridImagesAsContent","querySelector","rowSpan","Math","ceil","getBoundingClientRect","height","style","gridRowEnd","classList","add","resizeAllMasonryItems","clearTimeout","setTimeout","allItems","querySelectorAll","i","waitForImages","Imagesloaded","instance","elements","forEach","event","ProgressBar","GifGrid","loading","estado","state","setState","useEffect","imgs","catch","evt","console","log","useFetchGifs","GifExpertApp","categories","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b0b8eacd.chunk.js","sourcesContent":["import Imagesloaded from 'imagesloaded';\r\n\r\n/**\r\n * requiere\r\n * reset.css\r\n * npm install imagesloaded\r\n * Doc imagesloaded -> https://imagesloaded.desandro.com/\r\n *\r\n * masonry.css\r\n * https://w3bits.com/tools/masonry-generator/\r\n *\r\n *\r\n * doc\r\n * https://w3bits.com/css-grid-masonry/\r\n */\r\n\r\n\r\n/**\r\n * Set appropriate spanning to any masonry item\r\n *\r\n * Get different properties we already set for the masonry, calculate\r\n * height or spanning for any cell of the masonry grid based on its\r\n * content-wrapper's height, the (row) gap of the grid, and the size\r\n * of the implicit row tracks.\r\n *\r\n * @param item Object A brick/tile/cell inside the masonry\r\n * @link https://w3bits.com/css-grid-masonry/\r\n */\r\nfunction resizeMasonryItem(item) {\r\n\t/* Get the grid object, its row-gap, and the size of its implicit rows */\r\n\tconst grid = document.getElementsByClassName( 'masonry' )[0];\r\n\tif (grid) {\r\n\t\tconst rowGap              = parseInt( window.getComputedStyle( grid ).getPropertyValue( 'grid-row-gap' ) ),\r\n\t\t\t  rowHeight           = parseInt( window.getComputedStyle( grid ).getPropertyValue( 'grid-auto-rows' ) ),\r\n\t\t\t  gridImagesAsContent = item.querySelector( '.masonry-content' );\r\n\r\n\t\t/*\r\n\t\t * Spanning for any brick = S\r\n\t\t * Grid's row-gap = G\r\n\t\t * Size of grid's implicitly create row-track = R\r\n\t\t * Height of item content = H\r\n\t\t * Net height of the item = H1 = H + G\r\n\t\t * Net height of the implicit row-track = T = G + R\r\n\t\t * S = H1 / T\r\n\t\t */\r\n\t\tconst rowSpan = Math.ceil( (item.querySelector( '.masonry-content' ).getBoundingClientRect().height + rowGap) / (rowHeight + rowGap) );\r\n\t\t// console.log(2222)\r\n\t\t/* Set the spanning as calculated above (S) */\r\n\t\titem.style.gridRowEnd = 'span ' + rowSpan;\r\n\t\tif (gridImagesAsContent) {\r\n\t\t\titem.querySelector( '.masonry-content' ).style.height = \"auto\";\r\n\t\t\titem.classList.add('animate__zoomIn')\r\n\t\t}\r\n\t}\r\n}\r\n\r\nlet idTemporizador;\r\n\r\n/**\r\n * Apply spanning to all the masonry items\r\n *\r\n * Loop through all the items and apply the spanning to them using\r\n * `resizeMasonryItem()` function.\r\n *\r\n * @uses resizeMasonryItem\r\n * @link https://w3bits.com/css-grid-masonry/\r\n */\r\nfunction resizeAllMasonryItems() {\r\n\tclearTimeout( idTemporizador ); // reset timer\r\n\r\n\tidTemporizador = setTimeout( () => {\r\n\t\t// Get all item class objects in one list\r\n\t\tconst allItems = document.querySelectorAll( '.masonry-item' );\r\n\r\n\t\t/*\r\n\t\t * Loop through the above list and execute the spanning function to\r\n\t\t * each list-item (i.e. each masonry item)\r\n\t\t */\r\n\t\tif (allItems) {\r\n\t\t\tfor (let i = 0; i < allItems.length; i++) {\r\n\t\t\t\tresizeMasonryItem( allItems[i] );\r\n\t\t\t}\r\n\t\t}\r\n\t}, 200 );\r\n}\r\n\r\n/**\r\n * Resize the items when all the images inside the masonry grid\r\n * finish loading. This will ensure that all the content inside our\r\n * masonry items is visible.\r\n *\r\n * @uses ImagesLoaded\r\n * @uses resizeMasonryItem\r\n * @link https://w3bits.com/css-grid-masonry/\r\n */\r\nexport const waitForImages = () => {\r\n\tconst allItems = document.querySelectorAll( '.masonry-item' );\r\n\r\n\tif (allItems) {\r\n\t\tfor (let i = 0; i < allItems.length; i++) {\r\n\t\t\tImagesloaded( allItems[i], function (instance) {\r\n\t\t\t\tconst item = instance.elements[0];\r\n\t\t\t\tresizeMasonryItem( item );\r\n\t\t\t} );\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/* Resize all the grid items on the load and resize events */\r\nconst masonryEvents = ['load', 'resize'];\r\nmasonryEvents.forEach( function (event) {\r\n\twindow.addEventListener( event, resizeAllMasonryItems );\r\n} );\r\n\r\n/* Do a resize once more when all the images finish loading */\r\n// waitForImages();","import Swal from 'sweetalert2'\r\n\r\nexport const Modals = (title = 'No title', message = '', icon = 'warning')=> {\r\n\tSwal.fire( {\r\n\t\ttitle: title,\r\n\t\ticon: icon,\r\n\t\thtml:message,\r\n\t\tshowCloseButton: true,\r\n\t\tshowCancelButton: false,\r\n\t\tfocusConfirm: false,\r\n\t\tconfirmButtonText: 'OK', // <i class=\"fa fa-thumbs-up\"></i> Great!\r\n\t\t// cancelButtonText: '<i class=\"fa fa-thumbs-down\">Cancel</i>',\r\n\t\t// cancelButtonAriaLabel: 'Thumbs down'\r\n\t} ).then( r  =>'' )\r\n}\r\n\r\nexport const ModalInfo = (title = 'No title', message = '', icon = 'warning')=>{\r\n\tconst Toast = Swal.mixin({\r\n\t\ttoast: true,\r\n\t\tposition: 'top-end',\r\n\t\tshowConfirmButton: false,\r\n\t\ttimer: 3000,\r\n\t\ttimerProgressBar: true,\r\n\t\tdidOpen: (toast) => {\r\n\t\t\ttoast.addEventListener('mouseenter', Swal.stopTimer)\r\n\t\t\ttoast.addEventListener('mouseleave', Swal.resumeTimer)\r\n\t\t}\r\n\t})\r\n\r\n\tToast.fire( {\r\n\t\ticon: icon,\r\n\t\ttitle: title,\r\n\t\thtml: message\r\n\t} ).then( r  => '')\r\n}\r\n\r\nexport default Modals;","import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Modals, {ModalInfo} from \"./Modals\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState( '' );\r\n\r\n\tconst handleOnChange = (e) => {\r\n\t\tsetInputValue( e.target.value )\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault()\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories( cat => {\r\n\t\t\t\tconst valorRepetido = cat.find( r => r === inputValue.trim() )\r\n\r\n\t\t\t\tif (valorRepetido) {\r\n\t\t\t\t\tModalInfo( 'Error', 'Categoria repetido', 'warning' )\r\n\t\t\t\t\treturn [...cat]\r\n\t\t\t\t} else {\r\n\t\t\t\t\tModalInfo( 'OK', 'Mostrando imagenes', 'success' )\r\n\t\t\t\t\treturn [inputValue, ...cat]\r\n\t\t\t\t}\r\n\t\t\t} )\r\n\t\t\tsetInputValue( '' )\r\n\r\n\t\t} else {\r\n\t\t\tModals( 'Error', 'Debe Ingresar una categoria mas de dos letras', 'warning' )\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit={ handleSubmit }>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tid=\"inputAdd\"\r\n\t\t\t\tplaceholder='Agregar categoria'\r\n\t\t\t\tvalue={ inputValue }\r\n\t\t\t\tonChange={ handleOnChange }\r\n\t\t\t/>\r\n\t\t\t<button type=\"submit\">Agregar</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n};\r\n\r\nexport default AddCategory;\r\n","import React from 'react';\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"masonry-item\">\r\n\t\t\t<div className=\"masonry-content\">\r\n\t\t\t\t<figure>\r\n\t\t\t\t\t<img src={ url } alt={ title } className=''/>\r\n\t\t\t\t\t<figcaption className=\"masonry-title\">\r\n\t\t\t\t\t\t{ title }\r\n\t\t\t\t\t</figcaption>\r\n\t\t\t\t</figure>\r\n\t\t\t\t{/*<div className=\"masonry-title\">\r\n\t\t\t\t\t{ title }\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"masonry-description\">\r\n\t\t\t\t\t{ title }\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"masonry-footer\">\r\n\t\t\t\t\t{ title }\r\n\t\t\t\t</div>*/}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default GifGridItem;","/**\r\n * Obtiene las imagenes segun la categoria indicada.\r\n * retorna un aray de imagenes: id, title, url\r\n * @param category\r\n * @returns {Promise<*>}\r\n */\r\n\r\nexport const getGifs = async (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=WzhKHycWp9racCy0ebJgQzAZ8msYvcwm`;\r\n\r\n\tconst respuesta = await fetch( url )\r\n\tconst { data }  = await respuesta.json()\r\n\t// console.log( data )\r\n\treturn data.map( img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url\r\n\t\t}\r\n\t} );\r\n}\r\n\r\n// otro get sin async\r\nexport const getGifs3 = (category) => {\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=WzhKHycWp9racCy0ebJgQzAZ8msYvcwm`;\r\n\r\n\treturn fetch( url )\r\n\t.then(res =>res.json())\r\n\t.then(data =>{\r\n\t\tconst imgs = {data}\r\n\t\treturn imgs.map( img => {\r\n\t\t\treturn {\r\n\t\t\t\tid: img.id,\r\n\t\t\t\ttitle: img.title,\r\n\t\t\t\turl: img.images?.downsized_medium.url\r\n\t\t\t}\r\n\t\t} );\r\n\t})\r\n\t.catch(e=> console.log(`Error no se pudo obtener la informacion, error: ${e}`))\r\n}","import {useEffect, useState} from \"react\";\r\nimport {getGifs} from \"../helpers/getGifs\";\r\nimport {waitForImages} from \"../mansory\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n\tconst [state, setState] = useState( {\r\n\t\tdata: [],\r\n\t\tloading: true,\r\n\t\testado: ''\r\n\t} );\r\n\r\n\tuseEffect( () => {\r\n\t\tgetGifs( category )\r\n\t\t.then(\r\n\t\t\timgs => {\r\n\t\t\t\tsetState( {\r\n\t\t\t\t\tdata: imgs,\r\n\t\t\t\t\tloading: false,\r\n\t\t\t\t\testado: ''\r\n\t\t\t\t} )\r\n\t\t\t}\r\n\t\t).then(\r\n\t\t\twaitForImages\r\n\t\t)\r\n\t\t.catch(evt =>{\r\n\t\t\tconsole.log(`No se pudo obtener la información ${evt}`)\r\n\t\t\tsetState( {\r\n\t\t\t\tdata: [],\r\n\t\t\t\tloading: false,\r\n\t\t\t\testado: `No se pudo obtener la información ${evt}`\r\n\t\t\t} )\r\n\t\t})\r\n\t}, [category] );\r\n\r\n\treturn state;\r\n}","import React from 'react';\r\nimport './progressBar.css'\r\n\r\n// https://icons8.com/cssload/en/spinners\r\n\r\nexport const ProgressBar = () => {\r\n\treturn (\r\n\t\t<div className=\"cssload-container\">\r\n\t\t\t<div className=\"cssload-whirlpool\"/>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ProgressBar;","import GifGridItem from \"./GifGridItem\";\r\nimport '../masonry.css';\r\nimport '../animations.css';\r\nimport {useFetchGifs} from \"../hooks/useFetchGifs\";\r\nimport ProgressBar from \"./loading/ProgressBar\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n\tconst { data: images, loading, estado } = useFetchGifs( category );\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{ loading && <ProgressBar/> }\r\n\t\t\t{ estado !== '' && estado }\r\n\t\t\t<h2 className='text-center'>{ category }</h2>\r\n\t\t\t<div className='masonry-wrapper'>\r\n\t\t\t\t<div className=\"masonry\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\timages.map( img =>\r\n\t\t\t\t\t\t\t<GifGridItem key={ img.id } { ...img } />\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<hr/>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GifGrid;","import React, {useState} from 'react';\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n\t// const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\tconst [categories, setCategories] = useState( ['One Punch'] )\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h2>GifExpertApp</h2>\r\n\t\t\t<br/>\r\n\t\t\t<AddCategory setCategories={setCategories}/>\r\n\t\t\t\t{\r\n\t\t\t\t\tcategories.map( (category) =>\r\n\t\t\t\t\t\t<GifGrid key={category} category={category}/>\r\n\t\t\t\t\t )\r\n\t\t\t\t}\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GifExpertApp","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport GifExpertApp from \"./components/GifExpertApp\";\n\nReactDOM.render(\n  <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n/**\n * Para des instalar paquetes\n * \tComando\t\t\t\t\t\tDescripción\n\tnpm uninstall <paquete>\t\tDesinstala el paquete indicado,\n \t\t\t\t\t\t\t\teliminándolo de node_modules/ .\n */\n\n"],"sourceRoot":""}